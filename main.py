import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from aiogram import F
from aiogram.types import CallbackQuery
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
AI_TOKEN = os.getenv("AI_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_USERNAME")

dp = Dispatcher()
history = {}

async def generate_response(user_id: int, prompt: str):
    client = AsyncOpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=AI_TOKEN,
        default_headers={
            "HTTP-Referer": "https://t.me/SmartGDZ_Bot",
            "X-Title": "SmartGDZ Bot"
        }
    )

    if user_id not in history:
        history[user_id] = []

    messages = history[user_id]

    if not any(m["role"] == "system" for m in messages):
        messages.insert(0, {
            "role": "system",
            "content": (
                "–¢–∏ –æ—Å–≤—ñ—á–µ–Ω–∏–π —ñ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î —à–∫–æ–ª—è—Ä–∞–º —Ä–æ–±–∏—Ç–∏ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. "
                "–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –∑—Ä–æ–∑—É–º—ñ–ª–∏–º–∏ –π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
                "–Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ–≥–∞–Ω–∏–π ‚Äî –ø–æ—è—Å–Ω–∏ —á–æ–º—É."
            )
        })

    messages.append({"role": "user", "content": prompt})

    try:
        completion = await client.chat.completions.create(
            model="meta-llama/llama-4-maverick:free",
            messages=messages
        )
        response = completion.choices[0].message.content

        messages.append({"role": "assistant", "content": response})
        history[user_id] = messages[-10:]

        return response

    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞:", e)
        return "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É: @requnex_software"


@dp.message(CommandStart())
async def command_start_handler(message: Message, bot: Bot) -> None:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)

        if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            raise ValueError("Not subscribed")

    except (TelegramBadRequest, ValueError):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_subscription")]
        ])
        await message.answer(
            "‚ùóÔ∏è–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –Ω–æ–≤–∏–Ω.",
            reply_markup=keyboard
        )
        return


    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
        "–Ø ‚Äî <b>SmartGDZ –ë–æ—Ç</b>, —ñ —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ –¥–æ–º–∞—à–∫–æ—é! ‚úçÔ∏èüìö\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n\n"
        "üß† –ü—Ä–∞—Ü—é—é –Ω–∞ –±–∞–∑—ñ –®–Ü Llama 4 Maverick\n"
        "üí¨ –ü–∏—à–∏ –±—É–¥—å-—è–∫—ñ —à–∫—ñ–ª—å–Ω—ñ –∑–∞–¥–∞—á—ñ –∞–±–æ —Ç–µ–º–∏\n\n"
        "üõ†Ô∏è –ë–æ—Ç –ø—Ä–∞—Ü—é—î —É —Ä–µ–∂–∏–º—ñ –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ—ó\n\n"
        "üìû –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–Ω–∞–π—à–æ–≤ –±–∞–≥ ‚Äî –ø–∏—à–∏ @requnex_software",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "check_subscription")
async def start_check_handler(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

    if chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
        await callback.message.delete()
        await command_start_handler(callback.message)
    else:
        await callback.answer("‚ùó –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status not in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(F.text)
async def echo_handler(message: Message) -> None:
    bot = message.bot
    subscribed = await is_subscribed(bot, message.from_user.id)
    if not subscribed:
        await message.answer(
            f"üö´ –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}\n"
            "–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É."
        )
        return

    msg = await message.answer("üîÑ –ì–µ–Ω–µ—Ä—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∑–∞—á–µ–∫–∞–π...")
    response = await generate_response(message.from_user.id, message.text)
    await msg.delete()
    await message.answer(response)

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
